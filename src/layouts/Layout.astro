---
import "../styles/global.css";
import { getLangFromUrl } from "../i18n/utils";
import { ViewTransitions } from "astro:transitions";
import NavigationBar from "../components/navigationBar/navigationBar.astro";

const lang = getLangFromUrl(Astro.url);
export interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description, image = "/assets/img/favicon.svg" } = Astro.props;
---

<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href={image} />
    <meta name="generator" content={Astro.generator} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />
    <script is:inline>
      const theme = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };
      const isDark = theme() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");
      if (typeof localSotrage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
        theme.addEventListener("change", () => {
          const isDark = theme() === "dark";
          document.documentElement.classList[isDark ? "add" : "remove"]("dark");
        });
        document.addEventListener("astro:after-swap", () => {
          const isDark = theme() === "dark";
          document.documentElement.classList[isDark ? "add" : "remove"]("dark");
        });
      }
    </script>
  </head>
  <ViewTransitions />
  <body>
    <NavigationBar transition:persist />
    <slot />
  </body>
</html>
